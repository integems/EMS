{"version":3,"sources":["core/base.js","components/mediumEditor.js","extensions/alert.js","extensions/handleSelection.js","extensions/toolbar.js","extensions/toolbarStates.js","extensions/autoList.js"],"names":["MediumEditor","alert","dmx","mediumEditor","extensions","Extension","name","cfg","extend","Button","button","insertButton","aria","undefined","contentDefault","contentFA","classList","attrs","insertHTML","init","prototype","apply","this","arguments","createButton","on","handleClick","bind","getInsertButton","getAria","base","options","document","createElement","content","ariaLabel","add","forEach","className","setAttribute","Object","keys","attr","getEditorOption","innerHTML","event","preventDefault","stopPropagation","topBlockContainer","getFocusedElement","querySelector","insertAdjacentHTML","setSelection","trigger","selection","moveCursor","focus","getExtensionByName","checkState","InsertButton","Component","initialData","value","attributes","editable","type","Boolean","default","placeholder","String","static","align","enum","buttons","Array","disableReturn","disableDoubleReturn","disableExtraSpaces","disableSpellcheck","targetBlank","autoLink","autoList","fontawesome","methods","setValue","_setValue","events","changed","Event","updated","render","_getValueFromDOM","includes","$watch","_initEditor","performUpdate","updatedProps","has","props","_destroyEditor","$node","tagName","destroy","_editor","setContent","_updateHander","parse","split","buttonLabels","spellcheck","toolbar","sticky","updateOnEmptySelection","anchorPreview","showWhenToolbarIsVisible","text","hideOnClick","_initExtensions","dmxComponent","subscribe","imageDragging","extension","config","hasAttribute","getAttribute","e","console","warn","trim","set","getContent","nextTick","dispatchEvent","appendChild","getAlertElement","createAlertElement","elm","id","getEditorId","hide","show","message","remove","util","keyCode","LEFT","UP","RIGHT","DOWN","checkSelection","delay","handleEditableKeydown","documentElement","node","getSelectionStart","offset","getCaretOffsets","getKeyCode","BACKSPACE","left","previousElementSibling","click","test","parentNode","removeChild","figure","getClosestTag","nextElementSibling","ENTER","p","insertBefore","nextSibling","html","replace","fn","setTimeout","call","getEditorElements","element","slice","querySelectorAll","sel","getSelection","rangeCount","range","getRangeAt","editor","getContainerEditorElement","commonAncestorContainer","block","getTopBlockContainer","isMediumEditorElement","allowMultiParagraphSelection","insertDiffLeft","diffLeft","diffTop","firstButtonClass","lastButtonClass","standardizeSelectionStart","stickyTopOffset","relativeContainer","initThrottledMethods","getToolbarElement","getInsertbarElement","forEachExtension","iterator","context","command","createToolbar","createToolbarButtons","hasForm","getForm","attachEventHandlers","li","btn","buttonName","buttonOpts","ul","style","display","addBuiltInExtension","getButton","isElement","length","createInsertbar","insertbar","toggle","handleToggleClick","createInsertbarButtons","getInteractionElements","getToolbarActionsElement","getInsertbarActionsElement","throttledPositionToolbar","throttle","isActive","positionToolbarIfShown","handleBlur","handleFocus","handleEditableClick","handleEditableKeyup","handleDocumentMouseup","window","handleWindowScroll","handleWindowResize","target","isDescendant","clearTimeout","hideTimeout","delayShowTimeout","hideToolbar","hideInsertbar","isInsertbarExpanded","collapseInsertbar","expandInsertbar","isDisplayed","contains","showToolbar","isInsertbarDisplayed","showInsertbar","childNodes","isToolbarDefaultActionsDisplayed","hideToolbarDefaultActions","showToolbarDefaultActions","hideExtensionForms","hideForm","multipleBlockElementsSelected","regexBlockElements","RegExp","blockContainerElementNames","join","hasMultiParagraphs","getSelectionHtml","match","modifySelection","selectionRange","startContainer","nodeValue","startOffset","adjacentNode","findAdjacentTextNodeWithContent","getSelectionElement","substr","select","endContainer","endOffset","preventSelectionUpdates","selectionInContentEditableFalse","selectionElement","indexOf","isCollapsed","showAndUpdateInsertbar","showAndUpdateToolbar","selectionContainsContent","setToolbarButtonStates","setToolbarPosition","setInsertbarPosition","setInactive","checkActiveButtons","manualStateChecks","queryState","getSelectionRange","updateExtensionState","isAlreadyApplied","setActive","queryCommandState","push","getSelectedParentElement","some","container","positionStaticToolbar","positionToolbar","textContent","rect","getBoundingClientRect","top","pageYOffset","Math","max","pageXOffset","targetLeft","scrollTop","body","windowWidth","innerWidth","toolbarElement","containerRect","containerTop","containerCenter","width","toolbarHeight","offsetHeight","toolbarWidth","offsetWidth","halfOffsetWidth","right","ceil","boundary","height","nodeType","middleBoundary","elementsContainerBoundary","containerWidth","defaultLeft","elementsContainer","elementsContainerAbsolute","getComputedStyle","getPropertyValue","positions","relativeBoundary","key","isNaN","states","headers","nodeName","pendingState","currentState","onPositionToolbar","state","firstButton","lastButton","removeProperty","setProperty","onKeypress","keyPressEvent","isKey","SPACE","list_start","execAction"],"mappings":"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","file":"dmxMediumEditor.js","sourcesContent":["if (!MediumEditor) {\r\n    alert('Please insert medium-editor.js before dmxMediumEditor.js on your page.');\r\n}\r\n\r\n(function() {\r\n\r\ndmx.mediumEditor = {};\r\n\r\ndmx.mediumEditor.extensions = {};\r\n\r\ndmx.mediumEditor.Extension = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = MediumEditor.Extension.extend(cfg);\r\n};\r\n\r\ndmx.mediumEditor.Button = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = MediumEditor.extensions.button.extend(cfg);\r\n};\r\n\r\ndmx.mediumEditor.insertButton = MediumEditor.Extension.extend({\r\n\r\n    aria: undefined,\r\n\r\n    contentDefault: undefined,\r\n\r\n    contentFA: undefined,\r\n\r\n    classList: undefined,\r\n\r\n    attrs: undefined,\r\n\r\n    insertHTML: undefined,\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.button = this.createButton();\r\n        this.on(this.button, 'click', this.handleClick.bind(this));\r\n    },\r\n\r\n    getInsertButton: function() {\r\n        return this.button;\r\n    },\r\n\r\n    getAria: function() {\r\n        return (typeof this.aria === 'function') ? this.aria(this.base.options) : this.aria;\r\n    },\r\n\r\n    createButton: function() {\r\n        var button = this.document.createElement('button'),\r\n            content = this.contentDefault,\r\n            ariaLabel = this.getAria();\r\n\r\n        button.classList.add('medium-editor-insertbar-action');\r\n        button.classList.add('medium-editor-insertbar-action-' + this.name);\r\n\r\n        if (this.classList) {\r\n            this.classList.forEach(function(className) {\r\n                button.classList.add(className);\r\n            });\r\n        }\r\n\r\n        if (ariaLabel) {\r\n            button.setAttribute('title', ariaLabel);\r\n            button.setAttribute('aria-label', ariaLabel);\r\n        }\r\n\r\n        if (this.attrs) {\r\n            Object.keys(this.attrs).forEach(function(attr) {\r\n                button.setAttribute(attr, this.attrs[attr]);\r\n            }, this);\r\n        }\r\n\r\n        if (this.getEditorOption('buttonLabels') === 'fontawesome' && this.contentFA) {\r\n            content = this.contentFA;\r\n        }\r\n\r\n        button.innerHTML = content;\r\n\r\n        return button;\r\n    },\r\n\r\n    handleClick: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (this.insertHTML) {\r\n            //var topBlockContainer = MediumEditor.util.getTopBlockContainer(this.base.getSelectedParentElement());\r\n            var topBlockContainer = this.base.getFocusedElement().querySelector('.medium-editor-is-selected');\r\n\r\n            if (typeof this.insertHTML === 'function') {\r\n                this.insertHTML(topBlockContainer);\r\n            } else {\r\n                topBlockContainer.insertAdjacentHTML('beforebegin', this.insertHTML);\r\n            }\r\n        }\r\n\r\n        this.setSelection();\r\n    },\r\n\r\n    setSelection: function() {\r\n        this.base.trigger('editableInput', {}, this.base.getFocusedElement());\r\n        MediumEditor.selection.moveCursor(this.document, this.base.getFocusedElement().querySelector('.medium-editor-is-selected'), 0);\r\n        this.base.getFocusedElement().focus();\r\n        this.base.getExtensionByName('toolbar').checkState();\r\n    }\r\n\r\n});\r\n\r\ndmx.mediumEditor.InsertButton = function(name, cfg) {\r\n    cfg.name = name;\r\n    dmx.mediumEditor.extensions[name] = dmx.mediumEditor.insertButton.extend(cfg);\r\n};\r\n\r\n})();\r\n","dmx.Component('medium-editor', {\r\n\r\n  initialData: {\r\n    value: '',\r\n  },\r\n\r\n  attributes: {\r\n    editable: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    placeholder: {\r\n      type: String,\r\n      default: 'Type your text',\r\n    },\r\n\r\n    static: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    align: {\r\n      type: String,\r\n      default: 'center',\r\n      enum: ['left', 'center', 'right'],\r\n    },\r\n\r\n    buttons: {\r\n      type: [String, Array],\r\n      default: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\r\n      // bold|italic|underline|strikethrough|subscript|superscript|anchor|image|quote|pre|orderedlist|unorderedlist|indent|outdent|justifyLeft|justifyCenter|justifyRight|justifyFull|h1|h2|h3|h4|h5|h6|removeFormat|html\r\n    },\r\n\r\n    disableReturn: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableDoubleReturn: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableExtraSpaces: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    disableSpellcheck: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    targetBlank: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    autoLink: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    autoList: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    fontawesome: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n\r\n    value: {\r\n      type: String,\r\n      default: null,\r\n    },\r\n  },\r\n\r\n  methods: {\r\n    setValue (value) {\r\n      this._setValue(value);\r\n    },\r\n  },\r\n\r\n  events: {\r\n    changed: Event,\r\n    updated: Event,\r\n  },\r\n\r\n  render () {\r\n    let value = this._getValueFromDOM();\r\n\r\n    if (value.includes('{{')) {\r\n      this.$watch(value, this._setValue.bind(this));\r\n    }\r\n\r\n    this._initEditor();\r\n  },\r\n\r\n  performUpdate (updatedProps) {\r\n    if (updatedProps.has('value')) {\r\n      this._setValue(this.props.value);\r\n    }\r\n\r\n    this._destroyEditor();\r\n\r\n    if (this.$node.tagName == 'TEXTAREA' || this.props.editable) {\r\n      this._initEditor();\r\n    }\r\n  },\r\n\r\n  destroy () {\r\n    this._destroyEditor();\r\n  },\r\n\r\n  _setValue (value) {\r\n    if (this._editor) {\r\n      this._editor.setContent(value);\r\n    } else if (this.$node.tagName == 'TEXTAREA') {\r\n      this.$node.value = value;\r\n    } else {\r\n      this.$node.innerHTML = value;\r\n    }\r\n\r\n    this._updateHander();\r\n  },\r\n\r\n  _initEditor () {\r\n    if (this._editor) return;\r\n\r\n    let buttons = this.props.buttons;\r\n\r\n    if (typeof buttons == 'string') {\r\n      if (buttons[0] == '[') {\r\n        buttons = dmx.parse(buttons);\r\n      } else {\r\n        buttons = buttons.split(/\\s*,\\s*/g);\r\n      }\r\n    }\r\n\r\n    this._editor = new MediumEditor(this.$node, {\r\n      buttonLabels: this.props.fontawesome ? 'fontawesome' : false,\r\n      disableReturn: this.props.disableReturn,\r\n      disableDoubleReturn: this.props.disableDoubleReturn,\r\n      disableExtraSpaces: this.props.disableExtraSpaces,\r\n      spellcheck: !this.props.disableSpellcheck,\r\n      targetBlank: this.props.targetBlank,\r\n      autoLink: this.props.autoLink,\r\n      toolbar: {\r\n        static: this.props.static,\r\n        sticky: this.props.static,\r\n        align: this.props.align,\r\n        updateOnEmptySelection: this.props.static,\r\n        buttons: buttons,\r\n      },\r\n      anchorPreview: {\r\n        showWhenToolbarIsVisible: this.props.static,\r\n      },\r\n      placeholder: {\r\n        text: this.props.placeholder,\r\n        hideOnClick: false,\r\n      },\r\n      extensions: this._initExtensions(),\r\n    });\r\n\r\n    this._editor.dmxComponent = this;\r\n\r\n    this._editor.subscribe('editableInput', this._updateHander.bind(this));\r\n  },\r\n\r\n  _destroyEditor () {\r\n    if (this._editor) {\r\n      this._editor.destroy();\r\n      delete this._editor;\r\n    }\r\n  },\r\n\r\n  _initExtensions () {\r\n    let extensions = {\r\n      imageDragging: {},\r\n    };\r\n\r\n    Object.keys(dmx.mediumEditor.extensions).forEach(name => {\r\n      let extension = dmx.mediumEditor.extensions[name];\r\n      let config = {};\r\n\r\n      if (name == 'auto-list' && !this.props.autoList) return;\r\n      if (name == 'toolbar') return;\r\n\r\n      if (this.$node.hasAttribute('medium:' + name)) {\r\n        try {\r\n          config = dmx.parse(this.$node.getAttribute('medium:' + name));\r\n        } catch (e) {\r\n          console.warn('Invalid config for ' + name);\r\n        }\r\n      } else if (name == 'image-upload') {\r\n        // only external extension, only apply when attribute is on element\r\n        return;\r\n      }\r\n\r\n      extensions[name] = new extension(config);\r\n    });\r\n\r\n    let buttons = this.props.buttons;\r\n\r\n    if (typeof buttons == 'string') {\r\n      if (buttons[0] == '[') {\r\n        buttons = dmx.parse(buttons);\r\n      } else {\r\n        buttons = buttons.split(/\\s*,\\s*/g);\r\n      }\r\n    }\r\n\r\n    extensions.toolbar = new dmx.mediumEditor.extensions.toolbar({\r\n      static: this.props.static,\r\n      sticky: this.props.static,\r\n      align: this.props.align,\r\n      updateOnEmptySelection: this.props.static,\r\n      buttons: buttons,\r\n    });\r\n\r\n    return extensions;\r\n  },\r\n\r\n  _getValueFromDOM () {\r\n    let value = this.$node.tagName == 'TEXTAREA' ? this.$node.value : this.$node.innerHTML;\r\n    if (value) value = value.trim();\r\n    return value;\r\n  },\r\n\r\n  _updateHander (event) {\r\n    if (this._editor) {\r\n      this.set('value', this._editor.getContent());\r\n    } else {\r\n      this.set('value', this._getValueFromDOM());\r\n    }\r\n\r\n    dmx.nextTick(() => {\r\n      this.dispatchEvent('updated');\r\n      if (event instanceof Event) this.dispatchEvent('changed');\r\n    });\r\n  },\r\n\r\n});\r\n","dmx.mediumEditor.Extension('alert', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.getEditorOption('elementsContainer').appendChild(this.getAlertElement());\r\n    },\r\n\r\n    createAlertElement: function() {\r\n        var elm = this.document.createElement('div');\r\n\r\n        elm.id = 'medium-editor-alert-' + this.getEditorId();\r\n        elm.className = 'medium-editor-alert-overlay';\r\n        elm.innerHTML = '<div class=\"medium-editor-toolbar medium-editor-toolbar-active medium-editor-alert\"><ul><li><button class=\"medium-editor-button-first medium-editor-button-last\"></button></li></ul></div>';\r\n\r\n        this.on(elm, 'click', this.hide.bind(this));\r\n\r\n        return elm;\r\n    },\r\n\r\n    getAlertElement: function () {\r\n        if (!this.elm) {\r\n            this.elm = this.createAlertElement();\r\n        }\r\n\r\n        return this.elm;\r\n    },\r\n\r\n    show: function(message) {\r\n        var elm = this.getAlertElement();\r\n        elm.querySelector('button').innerHTML = message;\r\n        elm.classList.add('medium-editor-alert-active');\r\n    },\r\n\r\n    hide: function() {\r\n        this.getAlertElement().classList.remove('medium-editor-alert-active');\r\n    }\r\n\r\n});\r\n","MediumEditor.util.keyCode.LEFT = 37;\r\nMediumEditor.util.keyCode.UP = 38;\r\nMediumEditor.util.keyCode.RIGHT = 39;\r\nMediumEditor.util.keyCode.DOWN = 40;\r\n\r\ndmx.mediumEditor.Extension('handle-selection', {\r\n\r\n    init: function () {\r\n        this.subscribe('focus', this.checkSelection.bind(this));\r\n        this.subscribe('editableClick', this.delay(this.checkSelection.bind(this)));\r\n        this.subscribe('editableKeydown', this.handleEditableKeydown.bind(this));\r\n        this.subscribe('editableKeyup', this.checkSelection.bind(this));\r\n        this.on(this.document.documentElement, 'mouseup', this.checkSelection.bind(this));\r\n    },\r\n\r\n    handleEditableKeydown: function (event) {\r\n        var node = MediumEditor.selection.getSelectionStart(this.document);\r\n        var offset = MediumEditor.selection.getCaretOffsets(node);\r\n        var keyCode = MediumEditor.util.getKeyCode(event);\r\n        var isEmpty = /^(\\s+|<br\\/?>)?$/i;\r\n\r\n        if (\r\n            keyCode == MediumEditor.util.keyCode.BACKSPACE &&\r\n            offset.left === 0 &&\r\n            node.previousElementSibling &&\r\n            node.previousElementSibling.tagName == 'FIGURE'\r\n        ) {\r\n            node.previousElementSibling.querySelector('img').click();\r\n            if (isEmpty.test(node.innerHTML)) {\r\n                node.parentNode.removeChild(node);\r\n            }\r\n            event.preventDefault();\r\n        } else if (\r\n            keyCode == MediumEditor.util.keyCode.BACKSPACE &&\r\n            node.tagName == 'IMG'\r\n        ) {\r\n            var figure = MediumEditor.util.getClosestTag(node, 'figure');\r\n            MediumEditor.selection.moveCursor(this.document, figure.nextElementSibling, 0);\r\n            figure.parentNode.removeChild(figure);\r\n            event.preventDefault();\r\n        } else if (\r\n            keyCode == MediumEditor.util.keyCode.ENTER &&\r\n            MediumEditor.util.getClosestTag(node, 'figure') !== false\r\n        ) {\r\n            var p = this.document.createElement('p');\r\n            p.innerHTML = '<br>';\r\n            var figure = MediumEditor.util.getClosestTag(node, 'figure');\r\n            figure.parentNode.parentNode.insertBefore(p, figure.parentNode.nextSibling);\r\n            MediumEditor.selection.moveCursor(this.document, p);\r\n            event.preventDefault();\r\n        } else if (\r\n            node.tagName == 'IMG' &&\r\n            (keyCode == MediumEditor.util.keyCode.UP ||\r\n            keyCode == MediumEditor.util.keyCode.DOWN ||\r\n            keyCode == MediumEditor.util.keyCode.LEFT ||\r\n            keyCode == MediumEditor.util.keyCode.RIGHT)\r\n        ) {\r\n            MediumEditor.selection.moveCursor(this.document, node.parentNode.querySelector('figcaption'));\r\n        }\r\n    },\r\n\r\n    setContent: function (html) {\r\n        if (/^\\s*$/.test(html)) {\r\n            return '<p><br></p>';\r\n        }\r\n        return html;\r\n    },\r\n\r\n    getContent: function (html) {\r\n        return html.replace(/medium\\-editor\\-is\\-selected/gi, '').replace(/class=\"\\s*\"/gi, '');\r\n    },\r\n\r\n    delay: function (fn) {\r\n        return function() {\r\n            setTimeout(function() {\r\n                fn.call(this, arguments);\r\n            }.bind(this), 0);\r\n        }\r\n    },\r\n\r\n    destroy: function() {\r\n        this.getEditorElements().forEach(function(element) {\r\n            Array.prototype.slice.call(element.querySelectorAll('.medium-editor-is-selected')).forEach(function(element) {\r\n                element.classList.remove('medium-editor-is-selected');\r\n            });\r\n        }, this);\r\n    },\r\n\r\n    checkSelection: function () {\r\n        var sel = this.document.getSelection();\r\n\r\n        if (sel && sel.rangeCount > 0) {\r\n            var range = sel.getRangeAt(0);\r\n            var editor = MediumEditor.util.getContainerEditorElement(range.commonAncestorContainer)\r\n\r\n            if (editor) {\r\n                var block = MediumEditor.util.getTopBlockContainer(range.commonAncestorContainer);\r\n\r\n                Array.prototype.slice.call(editor.querySelectorAll('.medium-editor-is-selected')).forEach(function(node) {\r\n                    node.classList.remove('medium-editor-is-selected');\r\n                });\r\n\r\n                if (!MediumEditor.util.isMediumEditorElement(block)) {\r\n                    block.classList.add('medium-editor-is-selected');\r\n                }\r\n\r\n                var node = MediumEditor.selection.getSelectionStart(this.document);\r\n                if (node && node.tagName == 'IMG') {\r\n                    node.classList.add('medium-editor-is-selected');\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('toolbar', {\r\n    /* Toolbar Options */\r\n\r\n    /* align: ['left'|'center'|'right']\r\n     * When the __static__ option is true, this aligns the static toolbar\r\n     * relative to the medium-editor element.\r\n     */\r\n    align: 'center',\r\n\r\n    /* allowMultiParagraphSelection: [boolean]\r\n     * enables/disables whether the toolbar should be displayed when\r\n     * selecting multiple paragraphs/block elements\r\n     */\r\n    allowMultiParagraphSelection: true,\r\n\r\n    /* buttons: [Array]\r\n     * the names of the set of buttons to display on the toolbar.\r\n     */\r\n    buttons: ['bold', 'italic', 'underline', 'anchor', 'h2', 'h3', 'quote'],\r\n\r\n    /* insertDiffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the insertbar.\r\n     */\r\n    insertDiffLeft: -45,\r\n\r\n    /* diffLeft: [Number]\r\n     * value in pixels to be added to the X axis positioning of the toolbar.\r\n     */\r\n    diffLeft: 0,\r\n\r\n    /* diffTop: [Number]\r\n     * value in pixels to be added to the Y axis positioning of the toolbar.\r\n     */\r\n    diffTop: -10,\r\n\r\n    /* firstButtonClass: [string]\r\n     * CSS class added to the first button in the toolbar.\r\n     */\r\n    firstButtonClass: 'medium-editor-button-first',\r\n\r\n    /* lastButtonClass: [string]\r\n     * CSS class added to the last button in the toolbar.\r\n     */\r\n    lastButtonClass: 'medium-editor-button-last',\r\n\r\n    /* standardizeSelectionStart: [boolean]\r\n     * enables/disables standardizing how the beginning of a range is decided\r\n     * between browsers whenever the selected text is analyzed for updating toolbar buttons status.\r\n     */\r\n    standardizeSelectionStart: false,\r\n\r\n    /* static: [boolean]\r\n     * enable/disable the toolbar always displaying in the same location\r\n     * relative to the medium-editor element.\r\n     */\r\n    static: false,\r\n\r\n    /* sticky: [boolean]\r\n     * When the __static__ option is true, this enables/disables the toolbar\r\n     * \"sticking\" to the viewport and staying visible on the screen while\r\n     * the page scrolls.\r\n     */\r\n    sticky: false,\r\n\r\n    /* stickyTopOffset: [Number]\r\n     * Value in pixel of the top offset above the toolbar\r\n     */\r\n    stickyTopOffset: 0,\r\n\r\n    /* updateOnEmptySelection: [boolean]\r\n     * When the __static__ option is true, this enables/disables updating\r\n     * the state of the toolbar buttons even when the selection is collapsed\r\n     * (there is no selection, just a cursor).\r\n     */\r\n    updateOnEmptySelection: false,\r\n\r\n    /* relativeContainer: [node]\r\n     * appending the toolbar to a given node instead of body\r\n     */\r\n    relativeContainer: null,\r\n\r\n    init: function () {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.initThrottledMethods();\r\n\r\n        if (!this.relativeContainer) {\r\n            this.getEditorOption('elementsContainer').appendChild(this.getToolbarElement());\r\n        } else {\r\n            this.relativeContainer.appendChild(this.getToolbarElement());\r\n        }\r\n\r\n        this.getEditorOption('elementsContainer').appendChild(this.getInsertbarElement());\r\n    },\r\n\r\n    // Helper method to execute method for every extension, but ignoring the toolbar extension\r\n    forEachExtension: function (iterator, context) {\r\n        return this.base.extensions.forEach(function (command) {\r\n            if (command === this) {\r\n                return;\r\n            }\r\n            return iterator.apply(context || this, arguments);\r\n        }, this);\r\n    },\r\n\r\n    // Toolbar creation/deletion\r\n\r\n    createToolbar: function () {\r\n        var toolbar = this.document.createElement('div');\r\n\r\n        toolbar.id = 'medium-editor-toolbar-' + this.getEditorId();\r\n        toolbar.className = 'medium-editor-toolbar';\r\n\r\n        if (this.static) {\r\n            toolbar.className += ' static-toolbar';\r\n        } else if (this.relativeContainer) {\r\n            toolbar.className += ' medium-editor-relative-toolbar';\r\n        } else {\r\n            toolbar.className += ' medium-editor-stalker-toolbar';\r\n        }\r\n\r\n        toolbar.appendChild(this.createToolbarButtons());\r\n\r\n        // Add any forms that extensions may have\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm) {\r\n                toolbar.appendChild(extension.getForm());\r\n            }\r\n        });\r\n\r\n        this.attachEventHandlers();\r\n\r\n        return toolbar;\r\n    },\r\n\r\n    createToolbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li,\r\n            btn,\r\n            buttons,\r\n            extension,\r\n            buttonName,\r\n            buttonOpts;\r\n\r\n        ul.id = 'medium-editor-toolbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-toolbar-actions';\r\n        ul.style.display = 'block';\r\n\r\n        this.buttons.forEach(function (button) {\r\n            if (typeof button === 'string') {\r\n                buttonName = button;\r\n                buttonOpts = null;\r\n            } else {\r\n                buttonName = button.name;\r\n                buttonOpts = button;\r\n            }\r\n\r\n            // If the button already exists as an extension, it'll be returned\r\n            // othwerise it'll create the default built-in button\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getButton === 'function') {\r\n                btn = extension.getButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        buttons = ul.querySelectorAll('button');\r\n        if (buttons.length > 0) {\r\n            buttons[0].classList.add(this.firstButtonClass);\r\n            buttons[buttons.length - 1].classList.add(this.lastButtonClass);\r\n        }\r\n\r\n        return ul;\r\n    },\r\n\r\n    createInsertbar: function () {\r\n        var insertbar = this.document.createElement('div');\r\n\r\n        insertbar.id = 'medium-editor-insertbar-' + this.getEditorId();\r\n        insertbar.className = 'medium-editor-insertbar';\r\n\r\n        var toggle = this.document.createElement('button');\r\n        toggle.className = 'medium-editor-insertbar-toggle';\r\n        toggle.innerHTML = this.getEditorOption('buttonLabels') == 'fontawesome' ? '<i class=\"fa fa-plus\"></i>' : '<b>+</b>';\r\n\r\n        this.on(toggle, 'click', this.handleToggleClick.bind(this));\r\n\r\n        insertbar.appendChild(toggle);\r\n        insertbar.appendChild(this.createInsertbarButtons());\r\n\r\n        return insertbar;\r\n    },\r\n\r\n    createInsertbarButtons: function () {\r\n        var ul = this.document.createElement('ul'),\r\n            li, btn, buttons, extension, buttonName, buttonOpts;\r\n\r\n        ul.id = 'medium-editor-insertbar-actions' + this.getEditorId();\r\n        ul.className = 'medium-editor-insertbar-actions';\r\n\r\n        Object.keys(dmx.mediumEditor.extensions).forEach(function (button) {\r\n            buttonName = button;\r\n            buttonOpts = null;\r\n\r\n            extension = this.base.addBuiltInExtension(buttonName, buttonOpts);\r\n\r\n            if (extension && typeof extension.getInsertButton === 'function') {\r\n                btn = extension.getInsertButton(this.base);\r\n                li = this.document.createElement('li');\r\n                if (MediumEditor.util.isElement(btn)) {\r\n                    li.appendChild(btn);\r\n                } else {\r\n                    li.innerHTML = btn;\r\n                }\r\n                ul.appendChild(li);\r\n            }\r\n        }, this);\r\n\r\n        return ul;\r\n    },\r\n\r\n    destroy: function () {\r\n        if (this.toolbar) {\r\n            if (this.toolbar.parentNode) {\r\n                this.toolbar.parentNode.removeChild(this.toolbar);\r\n            }\r\n            delete this.toolbar;\r\n        }\r\n\r\n        if (this.insertbar) {\r\n            if (this.insertbar.parentNode) {\r\n                this.insertbar.parentNode.removeChild(this.insertbar);\r\n            }\r\n            delete this.insertbar;\r\n        }\r\n    },\r\n\r\n    // Toolbar accessors\r\n\r\n    getInteractionElements: function () {\r\n        return [this.getToolbarElement(), this.getInsertbarElement()];\r\n    },\r\n\r\n    getToolbarElement: function () {\r\n        if (!this.toolbar) {\r\n            this.toolbar = this.createToolbar();\r\n        }\r\n\r\n        return this.toolbar;\r\n    },\r\n\r\n    getToolbarActionsElement: function () {\r\n        return this.getToolbarElement().querySelector('.medium-editor-toolbar-actions');\r\n    },\r\n\r\n    getInsertbarElement: function () {\r\n        if (!this.insertbar) {\r\n            this.insertbar = this.createInsertbar();\r\n        }\r\n        return this.insertbar;\r\n    },\r\n\r\n    getInsertbarActionsElement: function () {\r\n        return this.getInsertbarElement().querySelector('.medium-editor-insertbar-actions');\r\n    },\r\n\r\n    // Toolbar event handlers\r\n\r\n    initThrottledMethods: function () {\r\n        // throttledPositionToolbar is throttled because:\r\n        // - It will be called when the browser is resizing, which can fire many times very quickly\r\n        // - For some event (like resize) a slight lag in UI responsiveness is OK and provides performance benefits\r\n        this.throttledPositionToolbar = MediumEditor.util.throttle(function () {\r\n            if (this.base.isActive) {\r\n                this.positionToolbarIfShown();\r\n            }\r\n        }.bind(this));\r\n    },\r\n\r\n    attachEventHandlers: function () {\r\n        // MediumEditor custom events for when user beings and ends interaction with a contenteditable and its elements\r\n        this.subscribe('blur', this.handleBlur.bind(this));\r\n        this.subscribe('focus', this.handleFocus.bind(this));\r\n\r\n        // Updating the state of the toolbar as things change\r\n        this.subscribe('editableClick', this.handleEditableClick.bind(this));\r\n        this.subscribe('editableKeyup', this.handleEditableKeyup.bind(this));\r\n\r\n        // Handle mouseup on document for updating the selection in the toolbar\r\n        this.on(this.document.documentElement, 'mouseup', this.handleDocumentMouseup.bind(this));\r\n\r\n        // Add a scroll event for sticky toolbar\r\n        if (this.static && this.sticky) {\r\n            // On scroll (capture), re-position the toolbar\r\n            this.on(this.window, 'scroll', this.handleWindowScroll.bind(this), true);\r\n        }\r\n\r\n        // On resize, re-position the toolbar\r\n        this.on(this.window, 'resize', this.handleWindowResize.bind(this));\r\n    },\r\n\r\n    handleWindowScroll: function () {\r\n        this.positionToolbarIfShown();\r\n    },\r\n\r\n    handleWindowResize: function () {\r\n        this.throttledPositionToolbar();\r\n    },\r\n\r\n    handleDocumentMouseup: function (event) {\r\n        // Do not trigger checkState when mouseup fires over the toolbar\r\n        if (event && event.target && (MediumEditor.util.isDescendant(this.getToolbarElement(), event.target) || MediumEditor.util.isDescendant(this.getInsertbarElement(), event.target))) {\r\n            return false;\r\n        }\r\n        this.checkState();\r\n    },\r\n\r\n    handleEditableClick: function () {\r\n        // Delay the call to checkState to handle bug where selection is empty\r\n        // immediately after clicking inside a pre-existing selection\r\n        setTimeout(function () {\r\n            this.checkState();\r\n        }.bind(this), 0);\r\n    },\r\n\r\n    handleEditableKeyup: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleBlur: function () {\r\n        // Kill any previously delayed calls to hide the toolbar\r\n        clearTimeout(this.hideTimeout);\r\n\r\n        // Blur may fire even if we have a selection, so we want to prevent any delayed showToolbar\r\n        // calls from happening in this specific case\r\n        clearTimeout(this.delayShowTimeout);\r\n\r\n        // Delay the call to hideToolbar to handle bug with multiple editors on the page at once\r\n        this.hideTimeout = setTimeout(function () {\r\n            this.hideToolbar();\r\n            this.hideInsertbar();\r\n        }.bind(this), 1);\r\n    },\r\n\r\n    handleFocus: function () {\r\n        this.checkState();\r\n    },\r\n\r\n    handleToggleClick: function(event) {\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        if (this.isInsertbarExpanded()) {\r\n            this.collapseInsertbar();\r\n        } else {\r\n            this.expandInsertbar();\r\n        }\r\n    },\r\n\r\n    // Hiding/showing toolbar\r\n\r\n    isDisplayed: function () {\r\n        return this.getToolbarElement().classList.contains('medium-editor-toolbar-active');\r\n    },\r\n\r\n    showToolbar: function () {\r\n        clearTimeout(this.hideTimeout);\r\n        if (!this.isDisplayed()) {\r\n            this.getToolbarElement().classList.add('medium-editor-toolbar-active');\r\n            this.trigger('showToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideToolbar: function () {\r\n        if (this.isDisplayed()) {\r\n            this.getToolbarElement().classList.remove('medium-editor-toolbar-active');\r\n            this.trigger('hideToolbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isInsertbarDisplayed: function () {\r\n        return this.getInsertbarElement().classList.contains('medium-editor-insertbar-active');\r\n    },\r\n\r\n    showInsertbar: function () {\r\n        if (!this.isInsertbarDisplayed() && this.getInsertbarElement().querySelector('.medium-editor-insertbar-actions').childNodes.length) {\r\n            this.getInsertbarElement().classList.add('medium-editor-insertbar-active');\r\n            this.trigger('showInsertbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    hideInsertbar: function () {\r\n        if (this.isInsertbarDisplayed()) {\r\n            this.collapseInsertbar();\r\n            this.getInsertbarElement().classList.remove('medium-editor-insertbar-active');\r\n            this.trigger('hideInsertbar', {}, this.base.getFocusedElement());\r\n        }\r\n    },\r\n\r\n    isInsertbarExpanded: function () {\r\n        return this.getInsertbarElement().classList.contains('medium-editor-insertbar-expand');\r\n    },\r\n\r\n    expandInsertbar: function () {\r\n        if (!this.isInsertbarExpanded()) {\r\n            this.getInsertbarElement().classList.add('medium-editor-insertbar-expand');\r\n            this.trigger('expandInsertbar');\r\n        }\r\n    },\r\n\r\n    collapseInsertbar: function() {\r\n        if (this.isInsertbarExpanded()) {\r\n            this.getInsertbarElement().classList.remove('medium-editor-insertbar-expand');\r\n            this.trigger('collapseInsertbar');\r\n        }\r\n    },\r\n\r\n    isToolbarDefaultActionsDisplayed: function () {\r\n        return this.getToolbarActionsElement().style.display === 'block';\r\n    },\r\n\r\n    hideToolbarDefaultActions: function () {\r\n        if (this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'none';\r\n        }\r\n    },\r\n\r\n    showToolbarDefaultActions: function () {\r\n        this.hideExtensionForms();\r\n\r\n        if (!this.isToolbarDefaultActionsDisplayed()) {\r\n            this.getToolbarActionsElement().style.display = 'block';\r\n        }\r\n\r\n        // Using setTimeout + options.delay because:\r\n        // We will actually be displaying the toolbar, which should be controlled by options.delay\r\n        this.delayShowTimeout = this.base.delay(function () {\r\n            this.showToolbar();\r\n        }.bind(this));\r\n    },\r\n\r\n    hideExtensionForms: function () {\r\n        // Hide all extension forms\r\n        this.forEachExtension(function (extension) {\r\n            if (extension.hasForm && extension.isDisplayed()) {\r\n                extension.hideForm();\r\n            }\r\n        });\r\n    },\r\n\r\n    // Responding to changes in user selection\r\n\r\n    // Checks for existance of multiple block elements in the current selection\r\n    multipleBlockElementsSelected: function () {\r\n        var regexEmptyHTMLTags = /<[^\\/>][^>]*><\\/[^>]+>/gim, // http://stackoverflow.com/questions/3129738/remove-empty-tags-using-regex\r\n            regexBlockElements = new RegExp('<(' + MediumEditor.util.blockContainerElementNames.join('|') + ')[^>]*>', 'g'),\r\n            selectionHTML = MediumEditor.selection.getSelectionHtml(this.document).replace(regexEmptyHTMLTags, ''), // Filter out empty blocks from selection\r\n            hasMultiParagraphs = selectionHTML.match(regexBlockElements); // Find how many block elements are within the html\r\n\r\n        return !!hasMultiParagraphs && hasMultiParagraphs.length > 1;\r\n    },\r\n\r\n    modifySelection: function () {\r\n        var selection = this.window.getSelection(),\r\n            selectionRange = selection.getRangeAt(0);\r\n\r\n        /*\r\n        * In firefox, there are cases (ie doubleclick of a word) where the selectionRange start\r\n        * will be at the very end of an element.  In other browsers, the selectionRange start\r\n        * would instead be at the very beginning of an element that actually has content.\r\n        * example:\r\n        *   <span>foo</span><span>bar</span>\r\n        *\r\n        * If the text 'bar' is selected, most browsers will have the selectionRange start at the beginning\r\n        * of the 'bar' span.  However, there are cases where firefox will have the selectionRange start\r\n        * at the end of the 'foo' span.  The contenteditable behavior will be ok, but if there are any\r\n        * properties on the 'bar' span, they won't be reflected accurately in the toolbar\r\n        * (ie 'Bold' button wouldn't be active)\r\n        *\r\n        * So, for cases where the selectionRange start is at the end of an element/node, find the next\r\n        * adjacent text node that actually has content in it, and move the selectionRange start there.\r\n        */\r\n        if (this.standardizeSelectionStart &&\r\n                selectionRange.startContainer.nodeValue &&\r\n                (selectionRange.startOffset === selectionRange.startContainer.nodeValue.length)) {\r\n            var adjacentNode = MediumEditor.util.findAdjacentTextNodeWithContent(MediumEditor.selection.getSelectionElement(this.window), selectionRange.startContainer, this.document);\r\n            if (adjacentNode) {\r\n                var offset = 0;\r\n                while (adjacentNode.nodeValue.substr(offset, 1).trim().length === 0) {\r\n                    offset = offset + 1;\r\n                }\r\n                selectionRange = MediumEditor.selection.select(this.document, adjacentNode, offset,\r\n                    selectionRange.endContainer, selectionRange.endOffset);\r\n            }\r\n        }\r\n    },\r\n\r\n    checkState: function () {\r\n        if (this.base.preventSelectionUpdates) {\r\n            return;\r\n        }\r\n\r\n        // If no editable has focus OR selection is inside contenteditable = false\r\n        // hide toolbar\r\n        if (!this.base.getFocusedElement() ||\r\n                MediumEditor.selection.selectionInContentEditableFalse(this.window)) {\r\n            return this.hideToolbar() && this.hideInsertbar();\r\n        }\r\n\r\n        // If there's no selection element, selection element doesn't belong to this editor\r\n        // or toolbar is disabled for this selection element\r\n        // hide toolbar\r\n        var selectionElement = MediumEditor.selection.getSelectionElement(this.window);\r\n        if (!selectionElement ||\r\n                this.getEditorElements().indexOf(selectionElement) === -1 ||\r\n                selectionElement.getAttribute('data-disable-toolbar')) {\r\n            return this.hideToolbar() && this.hideInsertbar();\r\n        }\r\n\r\n        // Now we know there's a focused editable with a selection\r\n\r\n        if (this.document.getSelection().isCollapsed && /^(\\s+|<br\\/?>)?$/i.test(MediumEditor.util.getTopBlockContainer(MediumEditor.selection.getSelectionStart(this.document)).innerHTML)) {\r\n            this.showAndUpdateInsertbar();\r\n        } else {\r\n            this.hideInsertbar();\r\n        }\r\n\r\n        // If the updateOnEmptySelection option is true, show the toolbar\r\n        if (this.updateOnEmptySelection && this.static) {\r\n            return this.showAndUpdateToolbar();\r\n        }\r\n\r\n        // If we don't have a 'valid' selection -> hide toolbar\r\n        if (!MediumEditor.selection.selectionContainsContent(this.document) ||\r\n            (this.allowMultiParagraphSelection === false && this.multipleBlockElementsSelected())) {\r\n            return this.hideToolbar();\r\n        }\r\n\r\n        this.showAndUpdateToolbar();\r\n    },\r\n\r\n    // Updating the toolbar\r\n\r\n    showAndUpdateToolbar: function () {\r\n        this.modifySelection();\r\n        this.setToolbarButtonStates();\r\n        this.trigger('positionToolbar', {}, this.base.getFocusedElement());\r\n        this.showToolbarDefaultActions();\r\n        this.setToolbarPosition();\r\n    },\r\n\r\n    showAndUpdateInsertbar: function () {\r\n        this.collapseInsertbar();\r\n        this.trigger('positionInsertbar', {}, this.base.getFocusedElement());\r\n        this.setInsertbarPosition();\r\n    },\r\n\r\n    setToolbarButtonStates: function () {\r\n        this.forEachExtension(function (extension) {\r\n            if (typeof extension.isActive === 'function' &&\r\n                typeof extension.setInactive === 'function') {\r\n                extension.setInactive();\r\n            }\r\n        });\r\n\r\n        this.checkActiveButtons();\r\n    },\r\n\r\n    checkActiveButtons: function () {\r\n        var manualStateChecks = [],\r\n            queryState = null,\r\n            selectionRange = MediumEditor.selection.getSelectionRange(this.document),\r\n            parentNode,\r\n            updateExtensionState = function (extension) {\r\n                if (typeof extension.checkState === 'function') {\r\n                    extension.checkState(parentNode);\r\n                } else if (typeof extension.isActive === 'function' &&\r\n                           typeof extension.isAlreadyApplied === 'function' &&\r\n                           typeof extension.setActive === 'function') {\r\n                    if (!extension.isActive() && extension.isAlreadyApplied(parentNode)) {\r\n                        extension.setActive();\r\n                    }\r\n                }\r\n            };\r\n\r\n        if (!selectionRange) {\r\n            return;\r\n        }\r\n\r\n        // Loop through all extensions\r\n        this.forEachExtension(function (extension) {\r\n            // For those extensions where we can use document.queryCommandState(), do so\r\n            if (typeof extension.queryCommandState === 'function') {\r\n                queryState = extension.queryCommandState();\r\n                // If queryCommandState returns a valid value, we can trust the browser\r\n                // and don't need to do our manual checks\r\n                if (queryState !== null) {\r\n                    if (queryState && typeof extension.setActive === 'function') {\r\n                        extension.setActive();\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n            // We can't use queryCommandState for this extension, so add to manualStateChecks\r\n            manualStateChecks.push(extension);\r\n        });\r\n\r\n        parentNode = MediumEditor.selection.getSelectedParentElement(selectionRange);\r\n\r\n        // Make sure the selection parent isn't outside of the contenteditable\r\n        if (!this.getEditorElements().some(function (element) {\r\n                return MediumEditor.util.isDescendant(element, parentNode, true);\r\n            })) {\r\n            return;\r\n        }\r\n\r\n        // Climb up the DOM and do manual checks for whether a certain extension is currently enabled for this node\r\n        while (parentNode) {\r\n            manualStateChecks.forEach(updateExtensionState);\r\n\r\n            // we can abort the search upwards if we leave the contentEditable element\r\n            if (MediumEditor.util.isMediumEditorElement(parentNode)) {\r\n                break;\r\n            }\r\n            parentNode = parentNode.parentNode;\r\n        }\r\n    },\r\n\r\n    // Positioning toolbar\r\n\r\n    positionToolbarIfShown: function () {\r\n        if (this.isDisplayed()) {\r\n            this.setToolbarPosition();\r\n        }\r\n    },\r\n\r\n    setToolbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        // If there isn't a valid selection, bail\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        if (this.static || !selection.isCollapsed) {\r\n            // we don't need any absolute positioning if relativeContainer is set\r\n            if (!this.relativeContainer) {\r\n                if (this.static) {\r\n                    this.positionStaticToolbar(container);\r\n                } else {\r\n                    this.positionToolbar(selection);\r\n                }\r\n            }\r\n\r\n            this.trigger('positionedToolbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showToolbar();\r\n        }\r\n    },\r\n\r\n    setInsertbarPosition: function () {\r\n        var container = this.base.getFocusedElement(),\r\n            selection = this.window.getSelection();\r\n\r\n        if (!container) {\r\n            return this;\r\n        }\r\n\r\n        var topBlockContainer = MediumEditor.util.getTopBlockContainer(this.base.getSelectedParentElement());\r\n\r\n        if (selection.isCollapsed && topBlockContainer.textContent == '') {\r\n            var rect = topBlockContainer.getBoundingClientRect();\r\n\r\n            this.getInsertbarElement().style.top = (rect.top + this.window.pageYOffset) + 'px';\r\n            this.getInsertbarElement().style.left = Math.max(rect.left + this.window.pageXOffset + this.insertDiffLeft, 0) + 'px';\r\n            this.trigger('positionedInsertbar', {}, this.base.getFocusedElement());\r\n\r\n            this.showInsertbar();\r\n        } else {\r\n            this.hideInsertbar();\r\n        }\r\n    },\r\n\r\n    positionStaticToolbar: function (container) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n\r\n        // document.documentElement for IE 9\r\n        var scrollTop = (this.document.documentElement && this.document.documentElement.scrollTop) || this.document.body.scrollTop,\r\n            windowWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            containerRect = container.getBoundingClientRect(),\r\n            containerTop = containerRect.top + scrollTop,\r\n            containerCenter = (containerRect.left + (containerRect.width / 2)),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            targetLeft;\r\n\r\n        if (this.sticky) {\r\n            // If it's beyond the height of the editor, position it at the bottom of the editor\r\n            if (scrollTop > (containerTop + container.offsetHeight - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.style.top = (containerTop + container.offsetHeight - toolbarHeight) + 'px';\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n            // Stick the toolbar to the top of the window\r\n            } else if (scrollTop > (containerTop - toolbarHeight - this.stickyTopOffset)) {\r\n                toolbarElement.classList.add('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = this.stickyTopOffset + 'px';\r\n            // Normal static toolbar position\r\n            } else {\r\n                toolbarElement.classList.remove('medium-editor-sticky-toolbar');\r\n                toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n            }\r\n        } else {\r\n            toolbarElement.style.top = containerTop - toolbarHeight + 'px';\r\n        }\r\n\r\n        switch (this.align) {\r\n            case 'left':\r\n                targetLeft = containerRect.left;\r\n                break;\r\n\r\n            case 'right':\r\n                targetLeft = containerRect.right - toolbarWidth;\r\n                break;\r\n\r\n            case 'center':\r\n                targetLeft = containerCenter - halfOffsetWidth;\r\n                break;\r\n        }\r\n\r\n        if (targetLeft < 0) {\r\n            targetLeft = 0;\r\n        } else if ((targetLeft + toolbarWidth) > windowWidth) {\r\n            targetLeft = (windowWidth - Math.ceil(toolbarWidth) - 1);\r\n        }\r\n\r\n        toolbarElement.style.left = targetLeft + 'px';\r\n    },\r\n\r\n    positionToolbar: function (selection) {\r\n        // position the toolbar at left 0, so we can get the real width of the toolbar\r\n        this.getToolbarElement().style.left = '0';\r\n        this.getToolbarElement().style.right = 'initial';\r\n\r\n        var range = selection.getRangeAt(0),\r\n            boundary = range.getBoundingClientRect();\r\n\r\n        // Handle selections with just images\r\n        if (!boundary || ((boundary.height === 0 && boundary.width === 0) && range.startContainer === range.endContainer)) {\r\n            // If there's a nested image, use that for the bounding rectangle\r\n            if (range.startContainer.nodeType === 1 && range.startContainer.querySelector('img')) {\r\n                boundary = range.startContainer.querySelector('img').getBoundingClientRect();\r\n            } else {\r\n                boundary = range.startContainer.getBoundingClientRect();\r\n            }\r\n        }\r\n\r\n        var containerWidth = this.window.innerWidth,\r\n            toolbarElement = this.getToolbarElement(),\r\n            toolbarHeight = toolbarElement.offsetHeight,\r\n            toolbarWidth = toolbarElement.offsetWidth,\r\n            halfOffsetWidth = toolbarWidth / 2,\r\n            buttonHeight = 50,\r\n            defaultLeft = this.diffLeft - halfOffsetWidth,\r\n            elementsContainer = this.getEditorOption('elementsContainer'),\r\n            elementsContainerAbsolute = ['absolute', 'fixed'].indexOf(window.getComputedStyle(elementsContainer).getPropertyValue('position')) > -1,\r\n            positions = {},\r\n            relativeBoundary = {},\r\n            middleBoundary, elementsContainerBoundary;\r\n\r\n        // If container element is absolute / fixed, recalculate boundaries to be relative to the container\r\n        if (elementsContainerAbsolute) {\r\n            elementsContainerBoundary = elementsContainer.getBoundingClientRect();\r\n            ['top', 'left'].forEach(function (key) {\r\n                relativeBoundary[key] = boundary[key] - elementsContainerBoundary[key];\r\n            });\r\n\r\n            relativeBoundary.width = boundary.width;\r\n            relativeBoundary.height = boundary.height;\r\n            boundary = relativeBoundary;\r\n\r\n            containerWidth = elementsContainerBoundary.width;\r\n\r\n            // Adjust top position according to container scroll position\r\n            positions.top = elementsContainer.scrollTop;\r\n        } else {\r\n            // Adjust top position according to window scroll position\r\n            positions.top = this.window.pageYOffset;\r\n        }\r\n\r\n        middleBoundary = boundary.left + boundary.width / 2;\r\n        positions.top += boundary.top - toolbarHeight;\r\n\r\n        if (boundary.top < buttonHeight) {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-over');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-under');\r\n            positions.top += buttonHeight + boundary.height - this.diffTop;\r\n        } else {\r\n            toolbarElement.classList.add('medium-toolbar-arrow-under');\r\n            toolbarElement.classList.remove('medium-toolbar-arrow-over');\r\n            positions.top += this.diffTop;\r\n        }\r\n\r\n        if (middleBoundary < halfOffsetWidth) {\r\n            positions.left = defaultLeft + halfOffsetWidth;\r\n            positions.right = 'initial';\r\n        } else if ((containerWidth - middleBoundary) < halfOffsetWidth) {\r\n            positions.left = 'auto';\r\n            positions.right = 0;\r\n        } else {\r\n            positions.left = defaultLeft + middleBoundary;\r\n            positions.right = 'initial';\r\n        }\r\n\r\n        ['top', 'left', 'right'].forEach(function (key) {\r\n            toolbarElement.style[key] = positions[key] + (isNaN(positions[key]) ? '' : 'px');\r\n        });\r\n    }\r\n});\r\n","dmx.mediumEditor.states = {\r\n    'headers': {\r\n        buttons: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\r\n        checkState: function(node) {\r\n            return ['H1', 'H2', 'H3', 'H4', 'H5', 'H6'].indexOf(node.nodeName) != -1;\r\n        }\r\n    }\r\n};\r\n\r\ndmx.mediumEditor.Extension('toolbar-states', {\r\n\r\n    pendingState: null,\r\n\r\n    currentState: null,\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('positionToolbar', this.onPositionToolbar.bind(this));\r\n    },\r\n\r\n    checkState: function(node) {\r\n        if (!this.pendingState) {\r\n            Object.keys(dmx.mediumEditor.states).forEach(function(name) {\r\n                var state = dmx.mediumEditor.states[name];\r\n                if (state.checkState(node)) {\r\n                    this.pendingState = state;\r\n                }\r\n            }, this);\r\n        }\r\n\r\n        if (MediumEditor.util.isMediumEditorElement(node)) {\r\n            this.currentState = this.pendingState;\r\n            this.pendingState = null;\r\n        }\r\n    },\r\n\r\n    onPositionToolbar: function() {\r\n        var firstButton, lastButton;\r\n        var toolbar = this.base.getExtensionByName('toolbar');\r\n        var state = this.currentState || { buttons: toolbar.buttons };\r\n\r\n        toolbar.forEachExtension(function(extension) {\r\n            if (typeof extension.getButton == 'function') {\r\n                var button = extension.getButton();\r\n\r\n                if (state.buttons.indexOf(extension.name) != -1) {\r\n                    button.style.removeProperty('display');\r\n                    firstButton = firstButton || button;\r\n                    lastButton = button;\r\n                } else {\r\n                    button.style.setProperty('display', 'none');\r\n                }\r\n\r\n                button.classList.remove(toolbar.firstButtonClass);\r\n                button.classList.remove(toolbar.lastButtonClass);\r\n            }\r\n        });\r\n\r\n        if (firstButton && lastButton) {\r\n            firstButton.classList.add(toolbar.firstButtonClass);\r\n            lastButton.classList.add(toolbar.lastButtonClass);\r\n        }\r\n    }\r\n\r\n});\r\n","dmx.mediumEditor.Extension('auto-list', {\r\n\r\n    init: function() {\r\n        MediumEditor.Extension.prototype.init.apply(this, arguments);\r\n\r\n        this.subscribe('editableKeypress', this.onKeypress.bind(this));\r\n    },\r\n\r\n    onKeypress: function (keyPressEvent) {\r\n        if (MediumEditor.util.isKey(keyPressEvent, [MediumEditor.util.keyCode.SPACE])) {\r\n            var list_start = this.base.getSelectedParentElement().textContent;\r\n\r\n            if (list_start == '1.' || list_start == '*') {\r\n                this.base.execAction(list_start == '*' ? 'insertunorderedlist' : 'insertorderedlist');\r\n                this.base.getSelectedParentElement().textContent = '';\r\n                keyPressEvent.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n});\r\n"]}