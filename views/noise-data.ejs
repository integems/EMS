<!-- Wappler include head-page="layouts/portal_layout" is="dmx-app" id="noisedata" appConnect="local" bootstrap5="local" fontawesome_6="local" bootstrap_icons="local" jquery_slim_35="cdn" components="{dmxBootstrap5Navigation:{},dmxBootstrap5TableGenerator:{},dmxFormatter:{},dmxDatePicker:{},dmxStateManagement:{}}" moment_2="cdn" -->
<dmx-query-manager id="query_sort"></dmx-query-manager>
<dmx-serverconnect id="sc_all_noise_locations" url="/api/location/noise_locations"></dmx-serverconnect>
<dmx-serverconnect id="sc_all_monitoring_locations" url="/api/location/all_locations"></dmx-serverconnect>
<dmx-serverconnect id="sc_noise_data" url="/api/noise/query_noise_data" dmx-param:monitoring_location="select_monitoring_location.value" dmx-param:year="" dmx-param:limit="50" dmx-param:location_type="select_location_type.value" dmx-param:start_date="" dmx-param:end_date="" dmx-param:sort="query_sort.data.sort" dmx-param:dir="query_sort.data.dir"></dmx-serverconnect>
<dmx-serverconnect id="sc_monitoring_locations" url="/api/location/monitoring_location_id"></dmx-serverconnect>
<dmx-serverconnect id="sc_monitorin_location_type" url="/api/location/monitoring_location_type"></dmx-serverconnect>



<section class="mb-3">
    <div class="container">
        <div class="row text-end">
            <div class="col text-start">

                <h1 class="fw-normal fs-2">Noise Data {{select_monitoring_location.selectedText}}</h1>
                <div class="breadcrumb">
                    <a class="breadcrumb-item breadcrumb-link fs-5 fw-light" href="/dashboard">Dashboard</a>
                    <a class="breadcrumb-item breadcrumb-link fs-5 fw-light" href="/noise">Noise</a>
                    <a class="breadcrumb-item breadcrumb-link fs-5 fw-bold" href="/noise-data">Data</a>
                </div>
            </div>

        </div>
    </div>
</section>


<section class="mb-3">
    <div class="container">
        <div class="row align-items-center">
            <!-- <div class="col-4">
                <input id="date" name="date" is="dmx-date-range-picker" type="text" class="form-control">
            </div> -->
            <div class="col-md-3 mb-2 mb-md-0">
                <select id="select_location_type" class="form-select" name="location_type_id" dmx-bind:options="sc_monitorin_location_type.data.location_type" optiontext="location_type" optionvalue="location_type">
                    <option value="">All Location Types</option>
                </select>
            </div>
            <div class="col-md-3 mb-2 mb-md-0">
                <select id="select_monitoring_location" class="form-select" name="location_id" dmx-bind:options="sc_all_noise_locations.data.noise_locations" optiontext="org_specific_monitoring_id+' - '+description" optionvalue="location_id">
                    <option value="">All Monitoring Locations</option>
                </select>
            </div>
            <div class="col-md-3 mb-2 mb-md-0">
                <button class="btn btn-primary" id="exportButton">

                    <span id="spinner" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    <i class="bi bi-download"></i>Export
                </button>
            </div>
            <!-- <div class="col-md-2">
                <button class="btn btn-secondary" id="exportAllButton">
                    <span id="spinnerAll" class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    Export All Data
                </button>
            </div> -->
        </div>
    </div>

</section>
<section class="mb-3">
    <div class="container">
        <div class="row">
            <div class="col mb-3">
                <div class="card">
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-striped table-bordered" id="noiseDataTable">
                                <thead>
                                    <tr>
                                        <th class="sorting" dmx-on:click="query.set('sort','org_specific_monitoring_id');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='org_specific_monitoring_id' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='org_specific_monitoring_id' && query.data.dir == 'desc'">Location</th>
                                        <th class="sorting" dmx-on:click="query.set('sort','location_type');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='location_type' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='location_type' && query.data.dir == 'desc'">Type</th>
                                        <th class="sorting" dmx-on:click="query.set('sort','start_date_time');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='start_date_time' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='start_date_time' && query.data.dir == 'desc'">Start Date</th>
                                        <th class="sorting" dmx-on:click="query.set('sort','end_date_time');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='end_date_time' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='end_date_time' && query.data.dir == 'desc'">End Date</th>
                                        <th class="sorting" dmx-on:click="query.set('sort','LAeq');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='LAeq' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='LAeq' && query.data.dir == 'desc'">LA<sub>eq</sub></th>
                                        <th class="sorting" dmx-on:click="query.set('sort','LA90');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='LA90' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='LA90' && query.data.dir == 'desc'">LA<sub>90</sub></th>
                                        <th class="sorting" dmx-on:click="query.set('sort','LA10');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='LA10' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='LA10' && query.data.dir == 'desc'">LA<sub>10</sub></th>
                                        <th class="sorting" dmx-on:click="query.set('sort','LAFMax');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='LAFMax' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='LAFMax' && query.data.dir == 'desc'">LAF<sub>Max</sub></th>
                                        <th class="sorting" dmx-on:click="query.set('sort','LAFMin');query.set('dir',query.data.dir == 'desc' ? 'asc' : 'desc')" dmx-class:sorting_asc="query.data.sort=='LAFMin' && query.data.dir == 'asc'" dmx-class:sorting_desc="query.data.sort=='LAFMin' && query.data.dir == 'desc'">LAF<sub>Min</sub></th>
                                    </tr>
                                </thead>
                                <tbody is="dmx-repeat" dmx-generator="bs5table" dmx-bind:repeat="sc_noise_data.data.query_noise.data" id="tableRepeat1" dmx-state="query" dmx-sort="sort" dmx-order="dir">
                                    <tr>
                                        <td dmx-text="org_specific_monitoring_id"></td>
                                        <td dmx-text="location_type"></td>
                                        <td dmx-text="start_date_time.formatDate('dd-MM-yyyy HH:mm')"></td>
                                        <td dmx-text="end_date_time.formatDate('dd-MM-yyyy HH:mm')"></td>
                                        <td dmx-text="LAeq"></td>
                                        <td dmx-text="LA90"></td>
                                        <td dmx-text="LA10"></td>
                                        <td dmx-text="LAFMax"></td>
                                        <td dmx-text="LAFMin"></td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                        <ul class="pagination" dmx-populate="sc_noise_data.data.query_noise" dmx-state="query_noise" dmx-offset="Offset" dmx-generator="bs5paging">
                            <li class="page-item" dmx-class:disabled="sc_noise_data.data.query_noise.page.current == 1" aria-label="First">
                                <a href="javascript:void(0)" class="page-link" dmx-on:click="query_noise.set('Offset',sc_noise_data.data.query_noise.page.offset.first)"><span aria-hidden="true">&lsaquo;&lsaquo;</span></a>
                            </li>
                            <li class="page-item" dmx-class:disabled="sc_noise_data.data.query_noise.page.current == 1" aria-label="Previous">
                                <a href="javascript:void(0)" class="page-link" dmx-on:click="query_noise.set('Offset',sc_noise_data.data.query_noise.page.offset.prev)"><span aria-hidden="true">&lsaquo;</span></a>
                            </li>
                            <li class="page-item" dmx-class:active="title == sc_noise_data.data.query_noise.page.current" dmx-class:disabled="!active" dmx-repeat="sc_noise_data.data.query_noise.getServerConnectPagination(2,1,'...')">
                                <a href="javascript:void(0)" class="page-link" dmx-on:click="query_noise.set('Offset',(page-1)*sc_noise_data.data.query_noise.limit)">{{title}}</a>
                            </li>
                            <li class="page-item" dmx-class:disabled="sc_noise_data.data.query_noise.page.current ==  sc_noise_data.data.query_noise.page.total" aria-label="Next">
                                <a href="javascript:void(0)" class="page-link" dmx-on:click="query_noise.set('Offset',sc_noise_data.data.query_noise.page.offset.next)"><span aria-hidden="true">&rsaquo;</span></a>
                            </li>
                            <li class="page-item" dmx-class:disabled="sc_noise_data.data.query_noise.page.current ==  sc_noise_data.data.query_noise.page.total" aria-label="Last">
                                <a href="javascript:void(0)" class="page-link" dmx-on:click="query_noise.set('Offset',sc_noise_data.data.query_noise.page.offset.last)"><span aria-hidden="true">&rsaquo;&rsaquo;</span></a>
                            </li>
                        </ul>
                    </div>
                </div>


            </div>
        </div>
    </div>

</section>

<script>
    document.getElementById('exportButton').addEventListener('click', function () {
        const table = document.getElementById('noiseDataTable');
        if (!table) {
            console.error('Table element with ID "noiseDataTable" not found.');
            return;
        }

        // Show spinner and disable button
        exportButton.disabled = true;
        spinner.classList.remove('d-none');

        const rows = Array.from(table.querySelectorAll('tr'));
        const csvContent = rows.map(row => {
            const cells = row.querySelectorAll('th, td');
            return Array.from(cells).map(cell => '"' + cell.textContent.replace(/"/g, '""') + '"').join(',');
        }).join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = 'table_export.csv';
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        // Hide spinner and enable button
        setTimeout(() => {
            spinner.classList.add('d-none');
            exportButton.disabled = false;
        }, 1000); // Add a slight delay to ensure download is complete
    });

      // Initialize allTableData by reading from the table
    const allTableData = [];
    const tableRows = document.querySelectorAll('#noiseDataTable tbody tr');

    tableRows.forEach(row => {
        const rowData = {};
        const cells = row.querySelectorAll('td');
        rowData.Location = cells[0]?.textContent || '';
        rowData.Type = cells[1]?.textContent || '';
        rowData.StartDate = cells[2]?.textContent || '';
        rowData.EndDate = cells[3]?.textContent || '';
        rowData.LAeq = cells[4]?.textContent || '';
        rowData.LA90 = cells[5]?.textContent || '';
        rowData.LA10 = cells[6]?.textContent || '';
        rowData.LAFMax = cells[7]?.textContent || '';
        rowData.LAFMin = cells[8]?.textContent || '';
        allTableData.push(rowData);
    });

    // document.getElementById('exportButton').addEventListener('click', function () {
    //     const exportButton = this;
    //     const spinner = document.getElementById('spinner');

    //     // Show spinner and disable button
    //     exportButton.disabled = true;
    //     spinner.classList.remove('d-none');

    //     const table = document.getElementById('noiseDataTable');
    //     const rows = Array.from(table.querySelectorAll('tr'));
    //     const csvContent = rows.map(row => {
    //         const cells = row.querySelectorAll('th, td');
    //         return Array.from(cells).map(cell => '"' + cell.textContent.replace(/"/g, '""') + '"').join(',');
    //     }).join('\n');

    //     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    //     const link = document.createElement('a');
    //     link.href = URL.createObjectURL(blob);
    //     link.download = 'table_export.csv';
    //     link.style.display = 'none';
    //     document.body.appendChild(link);
    //     link.click();
    //     document.body.removeChild(link);

    //     // Hide spinner and enable button
    //     setTimeout(() => {
    //         spinner.classList.add('d-none');
    //         exportButton.disabled = false;
    //     }, 1000); // Add a slight delay to ensure download is complete
    // });

    // document.getElementById('exportAllButton').addEventListener('click', function () {
    //     const exportAllButton = this;
    //     const spinnerAll = document.getElementById('spinnerAll');

    //     // Show spinner and disable button
    //     exportAllButton.disabled = true;
    //     spinnerAll.classList.remove('d-none');

    //     const csvContent = allTableData.map(row => {
    //         return Object.values(row).map(value => '"' + String(value).replace(/"/g, '""') + '"').join(',');
    //     }).join('\n');

    //     const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    //     const link = document.createElement('a');
    //     link.href = URL.createObjectURL(blob);
    //     link.download = 'all_data_export.csv';
    //     link.style.display = 'none';
    //     document.body.appendChild(link);
    //     link.click();
    //     document.body.removeChild(link);

    //     // Hide spinner and enable button
    //     setTimeout(() => {
    //         spinnerAll.classList.add('d-none');
    //         exportAllButton.disabled = false;
    //     }, 1000); // Add a slight delay to ensure download is complete
    // });

//     document.getElementById('exportAllButton').addEventListener('click', async function () {
//     const exportAllButton = this;
//     const spinnerAll = document.getElementById('spinnerAll');

//     // Show spinner and disable button
//     exportAllButton.disabled = true;
//     spinnerAll.classList.remove('d-none');

//     try {
//         // Fetch all data directly from the API endpoint
//         const response = await fetch('/api/noise/query_noise_data');
//         const data = await response.json();

//         // Convert JSON data to CSV
//         const csvContent = data.map(row => {
//             return Object.values(row).map(value => `"${String(value).replace(/"/g, '""')}"`).join(',');
//         }).join('\n');

//         // Create and download the CSV
//         const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
//         const link = document.createElement('a');
//         link.href = URL.createObjectURL(blob);
//         link.download = 'all_data_export.csv';
//         document.body.appendChild(link);
//         link.click();
//         document.body.removeChild(link);
//     } catch (error) {
//         console.error('Error exporting data:', error);
//     } finally {
//         // Hide spinner and enable button
//         spinnerAll.classList.add('d-none');
//         exportAllButton.disabled = false;
//     }
// });

    
</script>




<meta name="ac:route" content="/noise-data">